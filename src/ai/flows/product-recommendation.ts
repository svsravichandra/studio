// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Personalized product recommendations flow.
 *
 * - getPersonalizedRecommendations - A function that provides personalized product recommendations based on user preferences.
 * - PersonalizedRecommendationsInput - The input type for the getPersonalizedRecommendations function.
 * - PersonalizedRecommendationsOutput - The return type for the getPersonalizedRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PersonalizedRecommendationsInputSchema = z.object({
  browsingHistory: z
    .string()
    .describe('The user browsing history, as a string.'),
  statedPreferences: z
    .string()
    .describe('The user stated preferences, as a string.'),
});
export type PersonalizedRecommendationsInput =
  z.infer<typeof PersonalizedRecommendationsInputSchema>;

const PersonalizedRecommendationsOutputSchema = z.object({
  recommendations: z
    .array(z.string())
    .describe('An array of personalized product recommendations.'),
});
export type PersonalizedRecommendationsOutput =
  z.infer<typeof PersonalizedRecommendationsOutputSchema>;

export async function getPersonalizedRecommendations(
  input: PersonalizedRecommendationsInput
): Promise<PersonalizedRecommendationsOutput> {
  return personalizedProductRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'personalizedProductRecommendationPrompt',
  input: {schema: PersonalizedRecommendationsInputSchema},
  output: {schema: PersonalizedRecommendationsOutputSchema},
  prompt: `You are an expert personal shopper specializing in recommending soaps and grooming essentials.

  Based on the user's browsing history and stated preferences, provide a list of personalized product recommendations.
  Respond as a JSON array of strings.

  Browsing History: {{{browsingHistory}}}
  Stated Preferences: {{{statedPreferences}}}`,
});

const personalizedProductRecommendationFlow = ai.defineFlow(
  {
    name: 'personalizedProductRecommendationFlow',
    inputSchema: PersonalizedRecommendationsInputSchema,
    outputSchema: PersonalizedRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
